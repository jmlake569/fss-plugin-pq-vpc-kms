AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31

Metadata:
  AWS::ServerlessRepo::Application:
    Name: cloudone-filestorage-plugin-action-promote-or-quarantine
    Description: >-
      After a scan occurs, this example application places clean files in one bucket
      and malicious files in another.
    Author: Trend Micro Cloud One File Storage Security
    SpdxLicenseId: Apache-2.0
    LicenseUrl: ../../LICENSE
    ReadmeUrl: README.md
    Labels: [trendmicro, cloudone, filestorage, s3, bucket, plugin, promote, quarantine]
    HomePageUrl: https://github.com/trendmicro/cloudone-filestorage-plugins
    SemanticVersion: 1.1.0
    SourceCodeUrl: s3://test-fss-deploy-1/aws-python-promote-or-quarantine

Parameters:
  ScanningBucketName:
    Type: String
    Description: The S3 bucket scanned by Trend Micro Cloud One File Storage Security.
  ScanResultTopicARN:
    Type: String
    Description: The ARN of the scan result SNS topic in storage stack.
  PromoteBucketName:
    Type: String
    Default: ''
    Description: |
      [Optional] The bucket name used to promote files without malicious intent.
      Leave the bucket name blank to disable promoting.
  PromoteMode:
    Type: String
    AllowedValues:
      - move
      - copy
    Default: move
    Description: |
      The method by which files were promoted.
      (Options: move, copy)
  QuarantineBucketName:
    Type: String
    Default: ''
    Description: |
      [Optional] The bucket name to quarantine malicious files.
      Leave the bucket name blank to disable quarantining
  QuarantineMode:
    Type: String
    AllowedValues:
      - move
      - copy
    Default: move
    Description: |
      The method by which files were quarantined.
      (Options: move, copy)
  VpcSubnetId:
    Type: String
    Default: ''
    Description: |
      [Optional] The subnet ID of the VPC where the S3 bucket is located.
      Leave it blank to disable using a VPC.
  VpcSecurityGroupId:
    Type: String
    Default: ''
    Description: |
      [Optional] The security group ID of the VPC where the S3 bucket is located.
      Leave it blank to disable using a VPC.
  KMSKeyARN:
    Type: String
    Default: ''
    Description: |
      [Optional] The ARN of the AWS KMS key used for Encryption.
  ACL:
    Type: String
    AllowedValues:
      - ''
      - 'private'
      - 'public-read'
      - 'public-read-write'
      - 'authenticated-read'
      - 'aws-exec-read'
      - 'bucket-owner-read'
      - 'bucket-owner-full-control'
    Default: ''
    Description: |
      [Optional] Apply an access control list (ACL) on the file after it has been promoted or quarantined.
      (Options: private, public-read, public-read-write, authenticated-read, aws-exec-read, bucket-owner-read, bucket-owner-full-control)
  PermissionsBoundary:
    Type: String
    Default: ''
    Description: |
      [Optional] The ARN of the IAM permission boundary. Leave it blank to disable using a permission boundary.

Conditions:
  PromoteEnabled:
    !Not [!Equals [!Ref PromoteBucketName, '']]
  QuarantineEnabled:
    !Not [!Equals [!Ref QuarantineBucketName, '']]
  PutACL:
    !Not [!Equals [!Ref ACL, '']]
  IsBucketSSEKMSEnabled:
      !Not [!Equals [!Ref KMSKeyARN, '']]
  HasPermissionsBoundary:
    !Not [!Equals [!Ref PermissionsBoundary, '']]
  VpcEnabled: !Not [!Or [!Equals [!Ref VpcSubnetId, ''], !Equals [!Ref VpcSecurityGroupId, '']]]

Resources:
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      Policies:
        - PolicyName: lambda-execute
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: 'arn:aws:logs:*:*:*'

  PromoteOrQuarantineLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://test-fss-deploy-1/aws-python-promote-or-quarantine/pq.zip
      Handler: handler.lambda_handler
      Runtime: python3.8
      MemorySize: 512
      Timeout: 30
      Tracing: Active
      VpcConfig:
        !If
          - VpcEnabled
          - SubnetIds:
              - !Ref VpcSubnetId
            SecurityGroupIds:
              - !Ref VpcSecurityGroupId
          - !Ref AWS::NoValue
      Environment:
        Variables:
          PROMOTEBUCKET: !Ref PromoteBucketName
          PROMOTEMODE: !Ref PromoteMode
          QUARANTINEBUCKET: !Ref QuarantineBucketName
          QUARANTINEMODE: !Ref QuarantineMode
          KMSKEYARN: !Ref KMSKeyARN
          ACL: !Ref ACL
      Policies:
        - Statement:
            Effect: Allow
            Action:
              - s3:GetObject
              - s3:DeleteObject
              - s3:GetObjectTagging
            Resource:
              - !Sub arn:${AWS::Partition}:s3:::${ScanningBucketName}/*
        - Statement:
            Effect: Allow
            Action:
              - !If
                - IsBucketSSEKMSEnabled
                - kms:Decrypt
                - !Ref AWS::NoValue
            Resource:
              - !Ref KMSKeyARN
        - Statement:
            Effect: Allow
            Action:
              - s3:ListBucket
              - s3:PutObject
              - s3:PutObjectTagging
              - !If
                - PutACL
                - s3:PutObjectAcl
                - !Ref AWS::NoValue
            Resource:
              - !If
                - PromoteEnabled
                - !Sub arn:${AWS::Partition}:s3:::${PromoteBucketName}/*
                - !Ref AWS::NoValue
              - !If
                - QuarantineEnabled
                - !Sub arn:${AWS::Partition}:s3:::${QuarantineBucketName}/*
                - !Ref AWS::NoValue
      PermissionsBoundary: !If
        - HasPermissionsBoundary
        - !Ref PermissionsBoundary
        - !Ref AWS::NoValue
      Events:
        ScanResult:
          Type: SNS
          Properties:
            Topic: !Ref ScanResultTopicARN
